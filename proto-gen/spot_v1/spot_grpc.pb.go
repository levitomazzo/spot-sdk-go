// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/spot.proto

package spot_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotClient is the client API for Spot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotClient interface {
	ListLayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Layers, error)
	Call(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	CallStreamOutput(ctx context.Context, in *Input, opts ...grpc.CallOption) (Spot_CallStreamOutputClient, error)
}

type spotClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotClient(cc grpc.ClientConnInterface) SpotClient {
	return &spotClient{cc}
}

func (c *spotClient) ListLayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Layers, error) {
	out := new(Layers)
	err := c.cc.Invoke(ctx, "/spot.v1.Spot/ListLayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotClient) Call(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/spot.v1.Spot/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotClient) CallStreamOutput(ctx context.Context, in *Input, opts ...grpc.CallOption) (Spot_CallStreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Spot_ServiceDesc.Streams[0], "/spot.v1.Spot/CallStreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotCallStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spot_CallStreamOutputClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type spotCallStreamOutputClient struct {
	grpc.ClientStream
}

func (x *spotCallStreamOutputClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpotServer is the server API for Spot service.
// All implementations must embed UnimplementedSpotServer
// for forward compatibility
type SpotServer interface {
	ListLayers(context.Context, *emptypb.Empty) (*Layers, error)
	Call(context.Context, *Input) (*Output, error)
	CallStreamOutput(*Input, Spot_CallStreamOutputServer) error
	mustEmbedUnimplementedSpotServer()
}

// UnimplementedSpotServer must be embedded to have forward compatible implementations.
type UnimplementedSpotServer struct {
}

func (UnimplementedSpotServer) ListLayers(context.Context, *emptypb.Empty) (*Layers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLayers not implemented")
}
func (UnimplementedSpotServer) Call(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSpotServer) CallStreamOutput(*Input, Spot_CallStreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method CallStreamOutput not implemented")
}
func (UnimplementedSpotServer) mustEmbedUnimplementedSpotServer() {}

// UnsafeSpotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotServer will
// result in compilation errors.
type UnsafeSpotServer interface {
	mustEmbedUnimplementedSpotServer()
}

func RegisterSpotServer(s grpc.ServiceRegistrar, srv SpotServer) {
	s.RegisterService(&Spot_ServiceDesc, srv)
}

func _Spot_ListLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServer).ListLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.Spot/ListLayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServer).ListLayers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spot_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.Spot/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServer).Call(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spot_CallStreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServer).CallStreamOutput(m, &spotCallStreamOutputServer{stream})
}

type Spot_CallStreamOutputServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type spotCallStreamOutputServer struct {
	grpc.ServerStream
}

func (x *spotCallStreamOutputServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

// Spot_ServiceDesc is the grpc.ServiceDesc for Spot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spot.v1.Spot",
	HandlerType: (*SpotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLayers",
			Handler:    _Spot_ListLayers_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Spot_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallStreamOutput",
			Handler:       _Spot_CallStreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/spot.proto",
}
